buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

group = config.mod.group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod.name

version = config.mod.version

sourceCompatibility = 1.7

def forgeZip = "forge-${config.minecraft.version}-src.zip"
def forgeURL = "http://files.minecraftforge.net/maven/net/minecraftforge/forge/${config.minecraft.version}/forge-${config.minecraft.version}-src.zip"

minecraft {
    version = config.minecraft.version
    runDir = "eclipse"
}

repositories {
    maven {
        name "xcompwiz"
        url "http://maven.xcompwiz.com"
    }
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compile "com.xcompwiz.lookingglass:lookingglass:0.2.0.00:dev"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task downloadForgeZip {
	onlyIf { !file('eclipse').exists() }
	doLast {
		ant.get(src: forgeURL, dest: forgeZip, verbose: true)
	}
}

task extractEclipseDir(type: Copy, dependsOn: downloadForgeZip) {
	onlyIf { !file('eclipse').exists() }
	from zipTree(forgeZip)
	include 'eclipse/'
	into 'eclipse'
	eachFile {
		it.path = it.path.substring(it.path.indexOf('/') + 1)
	}
	includeEmptyDirs = false
}

task removeForgeZip(type: Delete, dependsOn: extractEclipseDir) {
	delete forgeZip
}

task downloadEclipseDir(dependsOn: removeForgeZip) {
	description 'Download the eclipse folder for use in development.'
}

getTasksByName('eclipse', false).each {
	it.dependsOn += downloadEclipseDir
}
